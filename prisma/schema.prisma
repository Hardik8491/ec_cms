generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roleId    String
  agencyId  String?

  role      Role     @relation(fields: [roleId], references: [id])
  agency    Agency?  @relation(fields: [agencyId], references: [id])
  products  Product[]
  orders    Order[]
  analytics Analytics[]
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     User[]
}

model Agency {
  id          String   @id @default(cuid())
  name        String
  subdomain   String   @unique
  logo        String?
  description String?
  isApproved  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
  products    Product[]
  categories  Category[]
  orders      Order[]
  analytics   Analytics[]
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  agencyId    String

  agency      Agency   @relation(fields: [agencyId], references: [id])
  products    Product[]

  @@unique([agencyId, slug])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  stock       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  agencyId    String
  userId      String
  categoryId  String?

  agency      Agency   @relation(fields: [agencyId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  category    Category? @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  analytics   Analytics[]
}

model Order {
  id          String   @id @default(cuid())
  status      String   @default("pending") // pending, processing, shipped, delivered, cancelled
  total       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  agencyId    String
  userId      String

  agency      Agency   @relation(fields: [agencyId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
}

model OrderItem {
  id          String   @id @default(cuid())
  quantity    Int
  price       Float
  orderId     String
  productId   String

  order       Order    @relation(fields: [orderId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
}

model Analytics {
  id         String   @id @default(cuid())
  pageViews  Int      @default(0)
  sales      Int      @default(0)
  revenue    Float    @default(0)
  date       DateTime @default(now())
  agencyId   String
  userId     String
  productId  String?

  agency     Agency   @relation(fields: [agencyId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  product    Product? @relation(fields: [productId], references: [id])
}
